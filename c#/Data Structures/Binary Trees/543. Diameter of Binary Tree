public class Solution {
    public int DiameterOfBinaryTree(TreeNode root) {
     // Create an array to hold the diameter of the tree
        int []diameter = new int[1];

        // Recursively calculate the height of the tree and update the diameter array
        Height(root,diameter);

        // Return the diameter of the tree
      return diameter[0];
    }

    public int Height(TreeNode root, int []diameter){
        
        // Base case: if the root is null, the height is 0
        if(root == null){
            return 0;
        }

        // Recursively calculate the height of the left and right subtrees
        int left = Height(root.left,diameter);
        int right = Height(root.right,diameter);

        // Update the diameter array by taking the maximum diameter that passes through the current node
        diameter[0] = Math.Max(diameter[0],left + right);

        // Return the maximum depth of the current node by adding 1 to the maximum depth of its deepest subtree
        return Math.Max(left,right)+1;
    }    
    
}
