public class Solution {
    public IList<int> SolveQueries(int[] nums, int[] queries) {
     IList<int> answer=new List<int>();
     Dictionary<int,int> mapFromBehind=new Dictionary<int,int>();  
     Dictionary<int,int> mapFromFront=new Dictionary<int,int>();     
     int [] indicesFromFront=new int[nums.Length];
     int [] indicesFromBehind=new int[nums.Length];
     for(int i=nums.Length-1;i>=0;i--){
      if(!mapFromBehind.ContainsKey(nums[i])){
       mapFromBehind[nums[i]]=i;
       indicesFromBehind[i]=nums.Length;
      }else{
       indicesFromBehind[i]=mapFromBehind[nums[i]];
       mapFromBehind[nums[i]]=i; 
      }  
     }
     for(int i=0;i<nums.Length;i++){
      if(!mapFromFront.ContainsKey(nums[i])){
       mapFromFront[nums[i]]=i;
       indicesFromFront[i]=nums.Length;
      }else{
       indicesFromFront[i]=mapFromFront[nums[i]];
       mapFromFront[nums[i]]=i; 
      }  
     }
     for(int i=0;i<queries.Length;i++){
      int index=queries[i];
      if(indicesFromFront[index]==nums.Length && indicesFromBehind[index]==nums.Length)answer.Add(-1);
      else if(indicesFromBehind[index]==nums.Length){
       int antiClockwiseDistance=index-indicesFromFront[index]; 
       int clockwiseDistance=nums.Length-index+mapFromBehind[nums[index]];
       answer.Add(Math.Min(antiClockwiseDistance,clockwiseDistance));
      }else if(indicesFromFront[index]==nums.Length){
        int antiClockwiseDistance=index+nums.Length-mapFromFront[nums[index]];
        int clockwiseDistance=indicesFromBehind[index]-index;
        answer.Add(Math.Min(antiClockwiseDistance,clockwiseDistance));
      }else{
        int antiClockwiseDistance=index-indicesFromFront[index];
        int clockwiseDistance=indicesFromBehind[index]-index;
        answer.Add(Math.Min(antiClockwiseDistance,clockwiseDistance));
      } 
     }
     return answer;   
    }
}
