public class Solution {
    public long MaximumSubarraySum(int[] nums, int k) {
     long max=0;
     long total=0;
     Dictionary<int,int> map=new Dictionary<int,int>();
     for(int i=0;i<k;i++){
      if(!map.ContainsKey(nums[i])) map[nums[i]]=1;
      else map[nums[i]]=map[nums[i]]+1;
      total+=1L*nums[i];
     } 
     if(map.Count==k) max=Math.Max(max,total);
     for(int i=1;i<=nums.Length-k;i++){
      map[nums[i-1]]=map[nums[i-1]]-1;
      if(map[nums[i-1]]==0)map.Remove(nums[i-1]);
      if(!map.ContainsKey(nums[i+k-1]))map[nums[i+k-1]]=1;
      else map[nums[i+k-1]]=map[nums[i+k-1]]+1;
      total-=1L*nums[i-1];
      total+=1L*nums[i+k-1];
      if(map.Count==k)max=Math.Max(max,total);
     }    
     return max;   
    }
}
