public class Solution {
    public int MinSumOfLengths(int[] arr, int target) {
     int total=0;
     Dictionary<int,int> sums=new Dictionary<int,int>();
     Dictionary<int,int> starts=new Dictionary<int,int>();
     Dictionary<int,int> ends=new Dictionary<int,int>();
     int min=100001;
     int [] lengthsFromFront=new int[arr.Length];
     int [] lengthsFromBehind=new int[arr.Length];
     Array.Fill(lengthsFromFront,100001); 
     Array.Fill(lengthsFromBehind,100001);
     sums[0]=0;
     for(int i=0;i<arr.Length;i++){
      total+=arr[i];
      sums[total]=i;
      if(sums.ContainsKey(total-target)){
       if(sums[total-target]==i){
        starts[i]=i;
        ends[i]=i;
       }else if(total==target){
        starts[0]=i;
        ends[i]=0;
       }else{ 
          starts[sums[total-target]+1]=i;
          ends[i]=sums[total-target]+1;
       }  
      }  
     }
     if(starts.Count<=1)return -1;
     int prefix=100001;
     int suffix=100001;
     for(int i=0;i<arr.Length;i++){
      if(ends.ContainsKey(i)){
        int start=ends[i];
        int length=i-start+1;
        if(i==0)lengthsFromFront[i]=1;
        else lengthsFromFront[i]=Math.Min(length,lengthsFromFront[i-1]);
      }else if(i>0)lengthsFromFront[i]=lengthsFromFront[i-1];
     }
     for(int i=arr.Length-1;i>=0;i--){
      if(starts.ContainsKey(i)){
        int end=starts[i];
        int length=end-i+1;
        if(i==arr.Length-1)lengthsFromBehind[i]=1;
        else lengthsFromBehind[i]=Math.Min(length,lengthsFromBehind[i+1]);
      }else if(i<arr.Length-1)lengthsFromBehind[i]=lengthsFromBehind[i+1];
     }
    
     for(int i=0;i<arr.Length;i++){
      if(starts.ContainsKey(i)){
       int length=starts[i]-i+1;
       if(i==0)prefix=100001;
       else prefix=lengthsFromFront[i-1];
       if(i==arr.Length-1)suffix=100001;
       else if(starts[i]==arr.Length-1)suffix=100001;
       else suffix=lengthsFromBehind[starts[i]+1];
       int totalLength=length+Math.Min(prefix,suffix);
       min=Math.Min(totalLength,min);        
      }  
     }
     if(min>=100001)return -1;
     else return min;   
    }
}
