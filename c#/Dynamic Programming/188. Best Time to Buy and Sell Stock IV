public class Solution {
    public int MaxProfit(int k, int[] prices) {
        int n = prices.Length;
        if (n == 0 || k == 0) return 0;

        // Optimization for large k (unlimited transactions case)
        if (k >= n / 2) {
            int profit = 0;
            for (int i = 1; i < n; i++) {
                if (prices[i] > prices[i - 1])
                    profit += prices[i] - prices[i - 1];
            }
            return profit;
        }

        // dp[t][d] = max profit using at most t transactions until day d
        int[,] dp = new int[k + 1,n];

        for (int t = 1; t <= k; t++) {
            int maxDiff = -1*prices[0]; // max(dp[t-1][d] - prices[d])
            for (int d = 1; d < n; d++) {
                dp[t,d] = Math.Max(dp[t,d - 1], prices[d] + maxDiff);
                maxDiff = Math.Max(maxDiff, dp[t - 1,d] - prices[d]);
            }
        }

        return dp[k,n - 1];   
    }
}
