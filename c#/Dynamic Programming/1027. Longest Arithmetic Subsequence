public class Solution {
    public int LongestArithSeqLength(int[] nums) {
     int max= nums[0];
     int min = nums[0];
     for(int i=0;i<nums.Length;i++){
      min= Math.Min(min,nums[i]);
      max= Math.Max(max,nums[i]);
     }
     int maxLength=-1;
     int diff= max-min;
     for(int i=-1*diff;i<=diff;i++){
      int length= GetLongestSubsequence(nums,i);
      maxLength=Math.Max(maxLength,length);
     }
     return maxLength;
    }
    
    public int GetLongestSubsequence(int[] arr, int difference) {
     int [] lengths= new int[arr.Length];
     Dictionary<int,int> map= new Dictionary<int,int>();
     for(int i=0;i<lengths.Length;i++)lengths[i]=1;
     int max= lengths[0];
     for(int i=0;i<arr.Length;i++){
       if(map.ContainsKey(arr[i]-difference)){
        int last= map[arr[i]-difference];
        lengths[i]=lengths[last]+1;
        max=Math.Max(max,lengths[i]);
       }
       if(!map.ContainsKey(arr[i]))map[arr[i]]=i;
       else map[arr[i]]=i;
     }
     return max; 
    }   
    
}
