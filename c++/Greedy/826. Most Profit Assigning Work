class Solution {
public:
    int maxProfitAssignment(vector<int>& difficulty, vector<int>& profit, vector<int>& worker) {
     int total=0;
     vector<int> maxProfits;
     unordered_map<int,int> map;
     for(int i=0;i<difficulty.size();i++){
      if(map.find(difficulty[i])==map.end())map[difficulty[i]]=profit[i];
      else{
       if(map[difficulty[i]]<profit[i])map[difficulty[i]]=profit[i]; 
      }
      maxProfits.push_back(0);  
     }
     std::sort(difficulty.begin(),difficulty.end());
     int maxProfit=map[difficulty[0]];
     maxProfits[0]=maxProfit;
     for(int i=1;i<maxProfits.size();i++){
      maxProfit=std::max(maxProfit,map[difficulty[i]]);
      maxProfits[i]=maxProfit;
     }
     for(int i=0;i<worker.size();i++){
      int ability=worker[i];
      if(ability<difficulty[0])continue;  
      if(ability>=difficulty[difficulty.size()-1]){
        total+=maxProfits[difficulty.size()-1];
        continue;
      }
      int left=0;
      int right=worker.size()-1;
      int mid=0;
      bool foundValue=false;
      while(left<=right){
        mid=(left+right)/2;
       if(difficulty[mid]==ability){
        foundValue=true;
        break;
       }else if(difficulty[mid]>ability)right=mid-1;
       else left=mid+1;
      }
      if(foundValue)total+=maxProfits[mid]; 
      else if(difficulty[left]<ability && difficulty[right]<ability) {
        int maxDifficulty=std::max(difficulty[left],difficulty[right]);
        if(maxDifficulty==difficulty[left])total+=maxProfits[left];
        else total+=maxProfits[right];
      }else if(difficulty[left]>ability)total+=maxProfits[right];
      else total+=maxProfits[left];  
     }
     return total;       
    }
};
