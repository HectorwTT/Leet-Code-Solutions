class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
     vector<int> result;
      if(root==NULL)return result;
      else if(root->left==NULL && root->right==NULL){
        result.push_back(root->val);
        return result;
      }else if(root->left==NULL){
        result.push_back(root->val);
        vector<int> rightTraversal=preorderTraversal(root->right);
        for(int i=0;i<rightTraversal.size();i++)result.push_back(rightTraversal.at(i));
        return result;
      }else if(root->right==NULL){
        result.push_back(root->val);
        vector<int> leftTraversal=preorderTraversal(root->left);
        for(int i=0;i<leftTraversal.size();i++)result.push_back(leftTraversal.at(i));
        return result;
      }else{
        result.push_back(root->val);
        vector<int> leftTraversal=preorderTraversal(root->left);
        for(int i=0;i<leftTraversal.size();i++)result.push_back(leftTraversal.at(i));        
        vector<int> rightTraversal=preorderTraversal(root->right);
        for(int i=0;i<rightTraversal.size();i++)result.push_back(rightTraversal.at(i));
        return result;
      }     
    }
};
