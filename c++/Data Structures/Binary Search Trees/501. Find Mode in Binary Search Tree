class Solution {
public:
    vector<int> findMode(TreeNode* root) {
      vector<int> result;
      unordered_map<int,int> map;
      vector<int> inorder=inorderTraversal(root);
      int max=0;
      for(int i=0;i<inorder.size();i++){
       if(map.find(inorder.at(i))==map.end())map[inorder.at(i)]=1;
       else map[inorder.at(i)]=map[inorder.at(i)]+1;
       max=std::max(max,map[inorder.at(i)]);
      } 
      for(auto number:map){
        if(number.second==max) result.push_back(number.first);
      }  
      return result;    
    }
     vector<int> inorderTraversal(TreeNode* root) {
      vector<int> result;
      if(root==NULL)return result;
      else if(root->left==NULL && root->right==NULL){
        result.push_back(root->val);
        return result;
      }else if(root->left==NULL){
        result.push_back(root->val);
        vector<int> rightTraversal=inorderTraversal(root->right);
        for(int i=0;i<rightTraversal.size();i++)result.push_back(rightTraversal.at(i));
        return result;
      }else if(root->right==NULL){
        vector<int> leftTraversal=inorderTraversal(root->left);
        for(int i=0;i<leftTraversal.size();i++)result.push_back(leftTraversal.at(i));
        result.push_back(root->val);
        return result;
      }else{
       vector<int> leftTraversal=inorderTraversal(root->left);
        for(int i=0;i<leftTraversal.size();i++)result.push_back(leftTraversal.at(i));
        result.push_back(root->val);
        vector<int> rightTraversal=inorderTraversal(root->right);
        for(int i=0;i<rightTraversal.size();i++)result.push_back(rightTraversal.at(i));
        return result;
      }  
    }
};
