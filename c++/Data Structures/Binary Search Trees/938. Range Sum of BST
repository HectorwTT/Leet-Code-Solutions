/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int rangeSumBST(TreeNode* root, int low, int high) {
     vector<int> inOrder=inorderTraversal(root);
     int sum=0;
     for(int i=0;i<inOrder.size();i++){
      if(inOrder.at(i)>=low && inOrder.at(i)<=high)sum+=inOrder.at(i);  
     }   
     return sum;
    }

    vector<int> inorderTraversal(TreeNode* root) {
      vector<int> result;
      if(root==NULL)return result;
      else if(root->left==NULL && root->right==NULL){
        result.push_back(root->val);
        return result;
      }else if(root->left==NULL){
        result.push_back(root->val);
        vector<int> rightTraversal=inorderTraversal(root->right);
        for(int i=0;i<rightTraversal.size();i++)result.push_back(rightTraversal.at(i));
        return result;
      }else if(root->right==NULL){
        vector<int> leftTraversal=inorderTraversal(root->left);
        for(int i=0;i<leftTraversal.size();i++)result.push_back(leftTraversal.at(i));
        result.push_back(root->val);
        return result;
      }else{
       vector<int> leftTraversal=inorderTraversal(root->left);
        for(int i=0;i<leftTraversal.size();i++)result.push_back(leftTraversal.at(i));
        result.push_back(root->val);
        vector<int> rightTraversal=inorderTraversal(root->right);
        for(int i=0;i<rightTraversal.size();i++)result.push_back(rightTraversal.at(i));
        return result;
      }  
    }
};
