class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
      vector<int> treeInOrder=inorderTraversal(root);
      for(int i=0;i<treeInOrder.size();i++){
        int number = treeInOrder[i];
        int position=i+1;
        if(position==k) return number;
      }
      return -1;  
    }
    vector<int> inorderTraversal(TreeNode* root) {
      vector<int> result;
      if(root==NULL)return result;
      else if(root->left==NULL && root->right==NULL){
        result.push_back(root->val);
        return result;
      }else if(root->left==NULL){
        result.push_back(root->val);
        vector<int> rightTraversal=inorderTraversal(root->right);
        for(int i=0;i<rightTraversal.size();i++)result.push_back(rightTraversal.at(i));
        return result;
      }else if(root->right==NULL){
        vector<int> leftTraversal=inorderTraversal(root->left);
        for(int i=0;i<leftTraversal.size();i++)result.push_back(leftTraversal.at(i));
        result.push_back(root->val);
        return result;
      }else{
       vector<int> leftTraversal=inorderTraversal(root->left);
        for(int i=0;i<leftTraversal.size();i++)result.push_back(leftTraversal.at(i));
        result.push_back(root->val);
        vector<int> rightTraversal=inorderTraversal(root->right);
        for(int i=0;i<rightTraversal.size();i++)result.push_back(rightTraversal.at(i));
        return result;
      }  
    }
};
