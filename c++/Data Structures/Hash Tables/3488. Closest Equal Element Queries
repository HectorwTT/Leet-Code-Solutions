class Solution {
public:
    vector<int> solveQueries(vector<int>& nums, vector<int>& queries) {
     vector<int> answer;
     unordered_map<int,int> mapFromBehind;  
     unordered_map<int,int> mapFromFront;     
     vector<int> indicesFromFront;
     vector<int> indicesFromBehind;
     for(int i=0;i<nums.size();i++){
      indicesFromFront.push_back(0);
      indicesFromBehind.push_back(0);  
     }
     for(int i=nums.size()-1;i>=0;i--){
      if(mapFromBehind.find(nums[i])==mapFromBehind.end()){
       mapFromBehind[nums[i]]=i;
       indicesFromBehind[i]=nums.size();
      }else{
       indicesFromBehind[i]=mapFromBehind[nums[i]];
       mapFromBehind[nums[i]]=i; 
      }  
     }
     for(int i=0;i<nums.size();i++){
      if(mapFromFront.find(nums[i])==mapFromFront.end()){
       mapFromFront[nums[i]]=i;
       indicesFromFront[i]=nums.size();
      }else{
       indicesFromFront[i]=mapFromFront[nums[i]];
       mapFromFront[nums[i]]=i; 
      }  
     }
     for(int i=0;i<queries.size();i++){
      int index=queries[i];
      if(indicesFromFront[index]==nums.size() && indicesFromBehind[index]==nums.size())answer.push_back(-1);
      else if(indicesFromBehind[index]==nums.size()){
       int antiClockwiseDistance=index-indicesFromFront[index]; 
       int clockwiseDistance=nums.size()-index+mapFromBehind[nums[index]];
       answer.push_back(std::min(antiClockwiseDistance,clockwiseDistance));
      }else if(indicesFromFront[index]==nums.size()){
        int antiClockwiseDistance=index+nums.size()-mapFromFront[nums[index]];
        int clockwiseDistance=indicesFromBehind[index]-index;
        answer.push_back(std::min(antiClockwiseDistance,clockwiseDistance));
      }else{
        int antiClockwiseDistance=index-indicesFromFront[index];
        int clockwiseDistance=indicesFromBehind[index]-index;
        answer.push_back(std::min(antiClockwiseDistance,clockwiseDistance));
      } 
     }
     return answer;   
    }
};
