class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
     long max=0;
     long total=0;
     unordered_map<int,int> map;
     for(int i=0;i<k;i++){
      if(map.find(nums[i])==map.end()) map[nums[i]]=1;
      else map[nums[i]]=map[nums[i]]+1;
      total+=1L*nums[i];
     } 
     if(map.size()==k) max=std::max(max,total);
     for(int i=1;i<=nums.size()-k;i++){
      map[nums[i-1]]=map[nums[i-1]]-1;
      if(map[nums[i-1]]==0)map.erase(nums[i-1]);
      if(map.find(nums[i+k-1])==map.end())map[nums[i+k-1]]=1;
      else map[nums[i+k-1]]=map[nums[i+k-1]]+1;
      total-=1L*nums[i-1];
      total+=1L*nums[i+k-1];
      if(map.size()==k)max=std::max(max,total);
     }    
     return max;  
    }
};
