class Solution {
public:
    int maxSumTwoNoOverlap(vector<int>& nums, int firstLen, int secondLen) {
     int total=0;
     int total1=0;
     int max=0;
     vector<int> sums;
     vector<int> sums1;
     vector<int> maxOfSecondLengthSubArraysFromFront;
     vector<int>  maxOfSecondLengthSubArraysFromBehind;   
     for(int i=0;i<nums.size();i++){
      total+=nums[i];
      sums.push_back(total);  
      sums1.push_back(0);
      maxOfSecondLengthSubArraysFromFront.push_back(0);
      maxOfSecondLengthSubArraysFromBehind.push_back(0);
     } 
     for(int i=nums.size()-1;i>=0;i--){
      total1+=nums[i];
      sums1[i]=total1;  
     } 
     for(int i=0;i<nums.size();i++){
      if(i>=secondLen-1){
       if(i==secondLen-1) maxOfSecondLengthSubArraysFromFront[i]=sums[i];
       else{
        int total2=sums[i]-sums[i-secondLen];
        maxOfSecondLengthSubArraysFromFront[i]=std::max(maxOfSecondLengthSubArraysFromFront[i-1],total2);
       }
      }  
     }
     for(int i=nums.size()-1;i>=0;i--){
      if(i<=nums.size()-secondLen){
       if(i==nums.size()-secondLen) maxOfSecondLengthSubArraysFromBehind[i]=sums1[i];
       else{
        int total3=sums1[i]-sums1[i+secondLen];
        maxOfSecondLengthSubArraysFromBehind[i]=std::max(maxOfSecondLengthSubArraysFromBehind[i+1],total3);
       }
      }      
     }
     for(int i=0;i<=nums.size()-firstLen;i++){
      if(i==0)max=std::max(max,sums[firstLen-1]+maxOfSecondLengthSubArraysFromBehind[firstLen]);
      else if(i==nums.size()-firstLen)max=std::max(max,
                                 sums[sums.size()-1]-sums[i-1]+maxOfSecondLengthSubArraysFromFront[i-1]); 
      else{
         int prefix=maxOfSecondLengthSubArraysFromFront[i-1];
         int suffix=maxOfSecondLengthSubArraysFromBehind[i+firstLen];
         max=std::max(max,sums[i+firstLen-1]-sums[i-1]+std::max(prefix,suffix));
      } 
     }
     return max;     
    }
};
