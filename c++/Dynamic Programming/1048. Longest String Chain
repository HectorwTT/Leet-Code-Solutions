
class Solution {
public:
    int longestStrChain(vector<string>& words) {
        sort(words.begin(), words.end(), [](const string& a, const string& b) {
            return a.length() < b.length();
        });
        unordered_map<int,vector<string>> wordsPerLength;
        unordered_map<string,int> wordIndexes;
        int n = words.size();
        vector<int> lengths(n, 1);
        int maxLen = 1;
        for(int i=0;i<lengths.size();i++){
         if(wordsPerLength.find(words[i].size())==wordsPerLength.end()){
          vector<string> wordsList;
          wordsList.push_back(words[i]);
          wordsPerLength[words[i].size()]=wordsList;  
         }else{
          vector<string> wordsList=wordsPerLength[words[i].size()];
          wordsList.push_back(words[i]);
          wordsPerLength[words[i].size()]=wordsList;   
         }
         if(wordIndexes.find(words[i])==wordIndexes.end())wordIndexes[words[i]]=i;
         else wordIndexes[words[i]]=i;
        }  
        for (int i = 1; i < n; ++i) {
         if(words[i].size()==1) continue; 
         if(wordsPerLength.find(words[i].size()-1)==wordsPerLength.end())continue;
         vector<string> wordsList=wordsPerLength[words[i].size()-1];      
         for(int j=0;j<wordsList.size();j++){
          string word=wordsList[j];
          int index=wordIndexes[word]; 
          if(isSubsequence(words[index],words[i]) &&lengths[i]<=lengths[index])
           lengths[i]=lengths[index]+1;
         }
         maxLen=std::max(maxLen,lengths[i]);   
        }
        return maxLen;
    }

private:
  bool isSubsequence(string s, string t) {
        int index=0;
        if(s.size()==0) return true;
        for(int i=0;i<t.size();i++){
            char tch = t[i];
            char sch= s[index];
            if(tch==sch) {
                if(index==s.size()-1)return true;
                index++;
            }
        }
        return false;
    }    
};
