class Solution {
public:
    bool validPartition(vector<int>& nums) {
      vector<bool> twoEqualFromFront;
      vector<bool>threeEqualFromFront;
      vector<bool>  threeConsecutiveFromFront;
      vector<bool> partitionsFromFront;   
      for(int i=0;i<nums.size();i++){
       twoEqualFromFront.push_back(false);
       threeEqualFromFront.push_back(false);
       threeConsecutiveFromFront.push_back(false);
       partitionsFromFront.push_back(false);  
      }
      for(int i=1;i<nums.size();i++){
       if(i==1){
        if(nums[i]==nums[i-1])twoEqualFromFront[i]=true; 
       }else if(i>=2){
        if(nums[i]==nums[i-1])twoEqualFromFront[i]=true; 
        if(nums[i]==nums[i-1] && nums[i-2]==nums[i-1])threeEqualFromFront[i]=true;
        if(nums[i]==nums[i-1]+1 && nums[i-1]==nums[i-2]+1)threeConsecutiveFromFront[i]=true;
       } 
      }      
      for(int i=1;i<nums.size();i++){
       if(i==1) partitionsFromFront[i]=twoEqualFromFront[i];
       else if(i==2){
        partitionsFromFront[i]=(threeConsecutiveFromFront[i])||(threeEqualFromFront[i]);
       }else{
        partitionsFromFront[i]=(twoEqualFromFront[i]&& partitionsFromFront[i-2])
                             ||(threeEqualFromFront[i]&&partitionsFromFront[i-3])
                             ||(threeConsecutiveFromFront[i]&& partitionsFromFront[i-3]);
       } 
      }
      return partitionsFromFront[nums.size()-1];      
    }
};
