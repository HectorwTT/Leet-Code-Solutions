class Solution {
    public int[] maximumBeauty(int[][] items, int[] queries) {
     Arrays.sort(items,Arrays::compare);
     int [] answer=new int[queries.length] ;
     int []beauties=new int[items.length];
     HashMap<Integer,Integer> maxBeauties=new HashMap<>();
          HashMap<Integer,Integer> map=new HashMap<>();

     int maxBeauty=items[0][1];
     for(int i=0;i<items.length;i++){
       maxBeauty=Math.max(maxBeauty,items[i][1]);beauties[i]=maxBeauty;
       if(!maxBeauties.containsKey(items[i][0]))maxBeauties.put(items[i][0],items[i][1]);
       else maxBeauties.replace(items[i][0],items[i][1]);
     } System.out.println(maxBeauties);
     for(int i=0;i<queries.length;i++){
      int price=queries[i]; 
      if(map.containsKey(price)){
        answer[i]=map.get(price);
        continue;
      }
      if(price<items[0][0]){
        answer[i]=0;System.out.println("AAA");
        map.put(price,0);
        continue;
      }
      int left=0;
      int right=items.length-1;
      boolean  hasBeenFound=false;
      while(left<=right){
       int mid=(left+right)/2;
       if(items[mid][0]==price){
        answer[i]=Math.max(beauties[mid],maxBeauties.get(items[mid][0]));
        map.put(price,answer[i]);
        hasBeenFound=true;
        break;
       }else if(items[mid][0]>price)right=mid-1; 
       else left=mid+1;
      }if(hasBeenFound)continue;
      if(left>items.length-1)answer[i]=beauties[right];
      else if(right<0)answer[i]=beauties[left];
      else{
       int smaller=Math.min(left,right);
       while(items[smaller][0]>price){
        smaller--;
       } 
       answer[i]=beauties[smaller];
       map.put(price,answer[i]);
       } 
     }
     return answer;
    }
}
