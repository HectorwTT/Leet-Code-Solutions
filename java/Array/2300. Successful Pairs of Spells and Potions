class Solution {
    public int[] successfulPairs(int[] spells, int[] potions, long success) {
        Arrays.sort(potions);
        int n = spells.length;
        int m = potions.length;
        int[] answer = new int[n];

        for (int i = 0; i < n; i++) {
            long spell = spells[i];
            long minPotion = (success + spell - 1) / spell; // smallest potion needed
            int index = binarySearch(potions, minPotion);
            answer[i] = m - index; // number of successful pairs
        }

        return answer;
    }

    private int binarySearch(int[] potions, long key) {
        int left = 0, right = potions.length - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (potions[mid] < key) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return left; // first index where potions[i] >= key
    }
}
