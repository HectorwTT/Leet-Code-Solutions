class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Map<Integer,Integer> map= new HashMap<>();
        HashMap<List<Integer>,Integer> map1=new HashMap<>();
        List<List<Integer>> triplets= new ArrayList<>();
        HashMap<Integer,Boolean> processed= new HashMap<>();
        Arrays.sort(nums);
        for(int i=0;i<nums.length-1;i++){
         if(!processed.containsKey(nums[i])){
          Set<List<Integer>> pairs= twoSum(nums,i+1,0-nums[i]);
          for(List<Integer> pair:pairs){
           pair.add(nums[i]);
           if(!map1.containsKey(pair)){
            triplets.add(pair);
            map1.put(pair,1);
           } 
          }
         }else processed.put(nums[i],true); 
        }
        return triplets;
    }
    public Set<List<Integer>> twoSum(int []nums,int start,int target){
     Map<Integer,Integer> map = new HashMap<>();
     Set<List<Integer>>numbers = new HashSet<>();
     for(int i=start;i<nums.length;i++){
       int other= target-nums[i];
       if(!map.containsKey(other)) map.put(nums[i],i);
       else {
        int[] pairs= new int[2];
        pairs[0]=other;
        pairs[1]= nums[i];
        List<Integer> pairList= new ArrayList<>();
        pairList.add(pairs[0]);
        pairList.add(pairs[1]);
        numbers.add(pairList);
       }
     }
     return numbers;
    }
}
