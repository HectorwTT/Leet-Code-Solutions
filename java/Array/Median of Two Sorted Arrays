class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
     int [][] nums= new int [2][];
     nums[0]=nums1;
     nums[1]=nums2;
     List<Integer> sortedList= mergeKArrays(nums);
     if(sortedList.size()%2==1)return sortedList.get((sortedList.size()-1)/2);
     else{
        int left= (sortedList.size())/2-1;
        int right=(sortedList.size())/2;
        double average=(double)(sortedList.get(left)+sortedList.get(right))/2;
        return average;
     }
    }
    List<Integer> mergeKArrays(int[][] arrays) {
     int[] firstUnused = new int[arrays.length];
     List<Integer> result = new ArrayList<>();
     int n = 0;
     for (int i = 0; i < arrays.length; i++) {
      n += arrays[i].length;
     }
     for (int i = 0; i < n; i++) {
      int minIndex = -1;
      int minValue = 0;
      for (int j = 0; j < arrays.length; j++) {
       if (firstUnused[j] < arrays[j].length) {
        if (minIndex==-1 ||arrays[j][firstUnused[j]]<minValue) {
          minIndex = j;
          minValue = arrays[j][firstUnused[j]];
        }
       }
      }
      result.add(minValue);
      firstUnused[minIndex]++;
     }
     return result;
    }
}
