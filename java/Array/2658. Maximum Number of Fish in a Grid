class Solution {
    public int findMaxFish(int[][] grid){
     int max=0;
     boolean [][] visited = new boolean[grid.length][grid[0].length];
     for(int i=0;i<grid.length;i++){
      for(int j=0;j<grid[i].length;j++){
        if(grid[i][j]>0){
          int total=dfs(grid,visited,i,j);
          max=Math.max(total,max);  
        }
      }  
     }
     return max;   
    }

    public int dfs(int[][]grid,boolean[][]visited,int i,int j){
     if(i==grid.length) return 0;  
     else if(i<0)return 0;
     else if(j==grid[0].length)return 0;
     else if(j<0)return 0;
     else if(grid[i][j]==0)return 0;
     else if(visited[i][j])return 0;
     else {
        visited[i][j]=true;
        return grid[i][j]+dfs(grid,visited,i+1,j)
        +dfs(grid,visited,i-1,j)
        +dfs(grid,visited,i,j+1)+dfs(grid,visited,i,j-1);
     }  
    }
}
