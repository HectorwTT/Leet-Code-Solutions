class Solution {
    public List<Integer> largestDivisibleSubset(int[] arr) {
        
        int n = arr.length;

        Arrays.sort(arr);
        int max = 1, ind = arr[0];
        int[] hash = new int[n];
        Map< Integer, HashSet< Integer > > map = new HashMap<>();
        Arrays.fill(hash,1);
        for(int i = 0; i < n; i++) map.put(arr[i], new HashSet<>(Arrays.asList(arr[i])));

        for(int i = 0; i < n ;i++){
            for(int j = i + 1; j < n; j++){
                if(arr[j] % arr[i] == 0 && hash[j] < hash[i] + 1){
                    hash[j] = hash[i] + 1;
                    HashSet< Integer > cur = (HashSet< Integer > ) map.get(arr[i]).clone();
                    cur.add(arr[j]);
                    map.put(arr[j], cur);
                    if(max < hash[j]){
                        max = hash[j];
                        ind = arr[j];
                    }
                }
            }
        }

        List< Integer > res = new ArrayList<>();

        for(Integer l : map.get(ind)) res.add(l);

        return res;
    }
}
