 public int maxProfit(int[] prices) {
        if (prices == null || prices.length == 0) {
            return 0;
        }

        int n = prices.length;
        
        // dp[i][0] = max profit on day i without owning a stock
        // dp[i][1] = max profit on day i with owning a stock
        // dp[i][2] = max profit on day i in cooldown
        int[][] dp = new int[n][3];

        // Initial state
        dp[0][0] = 0;  // No stock, no profit
        dp[0][1] = -prices[0];  // Bought stock on day 0
        dp[0][2] = 0;  // Cooldown on day 0, no profit

        for (int i = 1; i < n; i++) {
            // If we don't own stock, we can either stay in the same state or cooldown from owning stock
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][2]);

            // If we own stock, we can either stay in the same state or buy a stock
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]);

            // If we are in cooldown, we must have sold stock on the previous day
            dp[i][2] = dp[i - 1][1] + prices[i];
        }

        // The maximum profit is when we don't own any stock on the last day
        return Math.max(dp[n - 1][0], dp[n - 1][2]);
    }
