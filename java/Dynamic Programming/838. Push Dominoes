class Solution {
    public String pushDominoes(String dominoes) {
     char [] newDominoes=new char[dominoes.length()];
     int []  distFromNearestL=new int[dominoes.length()];
     int[]  distFromNearestR=new int[dominoes.length()];
     for(int i=0;i<dominoes.length();i++){
      char ch=dominoes.charAt(i);
      if(ch=='L')newDominoes[i]='L';
      else if(ch=='R')newDominoes[i]='R'; 
      if(i>0 && ch=='.'){
        char prevCh=dominoes.charAt(i-1);
        if(prevCh=='R')distFromNearestR[i]=1;
        else if(prevCh=='.'){
           if(distFromNearestR[i-1]!=0)distFromNearestR[i]=distFromNearestR[i-1]+1; 
        }
      }
     }      
     for(int i=dominoes.length()-2;i>=0;i--){
      char ch=dominoes.charAt(i);
      if(ch=='.'){
        char nextCh=dominoes.charAt(i+1);
        if(nextCh=='L')distFromNearestL[i]=1;
        else if(nextCh=='.'){
           if(distFromNearestL[i+1]!=0)distFromNearestL[i]=distFromNearestL[i+1]+1; 
        }
      } 
     } 
     for(int i=0;i<dominoes.length();i++){
        if(newDominoes[i]=='R' || newDominoes[i]=='L')continue; 
        if(distFromNearestR[i]>=1 && distFromNearestL[i]==0) newDominoes[i]='R';
        else if(distFromNearestR[i]==0 && distFromNearestL[i]>=1)newDominoes[i]='L';  
        else if(distFromNearestL[i]==distFromNearestR[i])newDominoes[i]='.';
        else if(distFromNearestR[i]<distFromNearestL[i])newDominoes[i]='R';
        else if(distFromNearestR[i]>distFromNearestL[i])newDominoes[i]='L'; 
    } 
    return String.valueOf(newDominoes);
    }
    
}
