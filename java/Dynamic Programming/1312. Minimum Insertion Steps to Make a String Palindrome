class Solution {
    public int minInsertions(String s) {
      return s.length()-longestPalindromeSubseq(s);  
    }
     public int longestPalindromeSubseq(String s) {
     StringBuffer sb=new StringBuffer(s);
     sb.reverse();
     return  longestCommonSubsequence(s,sb.toString()); 
    }

     public int solve(String text1, String text2, int i, int j) {
        if (i == text1.length() || j == text2.length())
            return 0;

        int ans = 0;
        if (text1.charAt(i) == text2.charAt(j)) {
            ans = 1 + solve(text1, text2, i+1, j+1);
        } else {
            ans = Math.max(solve(text1, text2, i+1, j), solve(text1, text2, i, j+1));
        }

        return ans;
    }

    public int solveMem(String text1, String text2, int i, int j, int[][] dp) {
        if (i == text1.length() || j == text2.length())
            return 0;

        if (dp[i][j] != -1)
            return dp[i][j];

        int ans = 0;
        if (text1.charAt(i) == text2.charAt(j)) {
            ans = 1 + solveMem(text1, text2, i+1, j+1, dp);
        } else {
            ans = Math.max(solveMem(text1, text2, i+1, j, dp), solveMem(text1, text2, i, j+1, dp));
        }

        return dp[i][j] = ans;
    }

    public int solveTab(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int[][] dp = new int[n+1][m+1];

        for (int i=n-1; i>=0; i--) {
            for (int j=m-1; j>=0; j--) {
                int ans = 0;
                if (text1.charAt(i) == text2.charAt(j)) {
                    ans = 1 + dp[i+1][j+1];
                } else {
                    ans = Math.max(dp[i+1][j], dp[i][j+1]);
                }

                dp[i][j] = ans;
            }
        }

        return dp[0][0];
    }

    public int solveTabSO(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int[] curr = new int[m+1];
        int[] next = new int[m+1];

        for (int i=n-1; i>=0; i--) {
            for (int j=m-1; j>=0; j--) {
                int ans = 0;
                if (text1.charAt(i) == text2.charAt(j)) {
                    ans = 1 + next[j+1];
                } else {
                    ans = Math.max(next[j], curr[j+1]);
                }

                curr[j] = ans;
            }
            next = curr.clone();
        }

        return next[0];
    }

    public int longestCommonSubsequence(String text1, String text2) {
        //return solve(text1, text2, 0, 0);

        // int n = text1.length();
        // int m = text2.length();
        // int[][] dp = new int[n][m];
        // return solveMem(text1, text2, 0, 0, dp);

        //return solveTab(text1, text2);

        return solveTabSO(text1, text2);
    }
}
