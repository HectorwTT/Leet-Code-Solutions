class Solution {
    public int longestSubarray(int[] nums) {
     int [] numOfConsecutiveOnesFromFront=new  int[nums.length];
     int [] numOfConsecutiveOnesFromBehind=new int[nums.length];
     int max=0;
     if(nums.length==1)return max; 
     if(nums[0]==1)numOfConsecutiveOnesFromFront[0]=1;
     for(int i=1;i<nums.length;i++){
      if(nums[i]==1){
        if(nums[i-1]==1)numOfConsecutiveOnesFromFront[i]=numOfConsecutiveOnesFromFront[i-1]+1;
        else numOfConsecutiveOnesFromFront[i]=1;
      }  
     } 
     if(nums[nums.length-1]==1)numOfConsecutiveOnesFromBehind[nums.length-1]=1; 
     for(int i=nums.length-2;i>=0;i--){
      if(nums[i]==1){
        if(nums[i+1]==1)numOfConsecutiveOnesFromBehind[i]=numOfConsecutiveOnesFromBehind[i+1]+1;
        else numOfConsecutiveOnesFromBehind[i]=1;
      }  
     } 
     max=Math.max(numOfConsecutiveOnesFromBehind[1],max);  
    for(int i=1;i<nums.length-1;i++) max=Math.max(max,numOfConsecutiveOnesFromFront[i-1]+numOfConsecutiveOnesFromBehind[i+1]);  
    max=Math.max(numOfConsecutiveOnesFromFront[nums.length-2],max);
     return max;
    }
}
