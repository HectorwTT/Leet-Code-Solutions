class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        Map<Integer, List<int[]>> graph = new HashMap<>();
        for (int[] f : flights) {
            graph.computeIfAbsent(f[0], x -> new ArrayList<>()).add(new int[] {f[1], f[2]});
        }

        // [cost, city, stops used]
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        pq.offer(new int[] {0, src, 0});

        // Store best [city][stops] â†’ cost
        int[][] best = new int[n][k + 2]; // up to k+1 stops allowed
        for (int[] row : best) Arrays.fill(row, Integer.MAX_VALUE);
        best[src][0] = 0;

        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int cost = cur[0], city = cur[1], stops = cur[2];

            if (city == dst) return cost;
            if (stops > k) continue;

            if (!graph.containsKey(city)) continue;

            for (int[] next : graph.get(city)) {
                int nextCity = next[0], price = next[1];
                int nextCost = cost + price;

                // Only proceed if we found a better cost at this stop count
                if (nextCost < best[nextCity][stops + 1]) {
                    best[nextCity][stops + 1] = nextCost;
                    pq.offer(new int[] {nextCost, nextCity, stops + 1});
                }
            }
        }

        return -1;
    }
}
