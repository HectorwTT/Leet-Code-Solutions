class Solution {
    public int minPathCost(int[][] grid, int[][] moveCost) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];

        // Initialize first row
        for (int j = 0; j < n; j++) {
            dp[0][j] = grid[0][j];
        }

        // Fill dp table
        for (int i = 1; i < m; i++) {
            for (int j = 0; j < n; j++) {  // target col in current row
                dp[i][j] = Integer.MAX_VALUE;
                for (int k = 0; k < n; k++) {  // previous col
                    int prevVal = grid[i - 1][k];
                    int cost = moveCost[prevVal][j];
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][k] + cost + grid[i][j]);
                }
            }
        }

        // Find min in last row
        int result = Integer.MAX_VALUE;
        for (int j = 0; j < n; j++) {
            result = Math.min(result, dp[m - 1][j]);
        }

        return result;
    }
}
