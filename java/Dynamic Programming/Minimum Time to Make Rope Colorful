class Solution {
    public int minCost(String colors, int[] neededTime) {
     int [] length= new int [neededTime.length];
     length[0]=1;
     int total=0;
     List<Integer> times= new ArrayList<>();
     for(int i=1;i<colors.length();i++){
      if(colors.charAt(i-1)==colors.charAt(i)){
        length[i]=length[i-1]+1;
      }else length[i]=1;
     }
    
    times.add(neededTime[0]);
    for(int i=1;i<length.length;i++){
     if(length[i]==1 ){
      if(times.size()>=2){
        times.sort(null);
        int max= times.get(times.size()-1);
        int sum= times.stream().mapToInt(Integer::intValue).sum();
        total+=sum-max;
      }
      times=new ArrayList<>();
      times.add(neededTime[i]);
     }else times.add(neededTime[i]);
    }
     if(times.size()>=2){
        times.sort(null);
        int max= times.get(times.size()-1);
        int sum= times.stream().mapToInt(Integer::intValue).sum();
        total+=sum-max;
      }
    return total;
    }
}
