class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
      HashMap<Integer,List<Integer>> map = new HashMap<>();
      if(source==destination)return true;
      for(int i=0;i<edges.length;i++){
        if(!map.containsKey(edges[i][0])){
         List<Integer> list= new ArrayList<>();
         list.add(edges[i][1]);
         map.put(edges[i][0],list);
        }else{
         List<Integer> list= map.get(edges[i][0]);
         list.add(edges[i][1]);
         map.replace(edges[i][0],list);
        }
         if(!map.containsKey(edges[i][1])){
         List<Integer> list= new ArrayList<>();
         list.add(edges[i][0]);
         map.put(edges[i][1],list);
        }else{
         List<Integer> list= map.get(edges[i][1]);
         list.add(edges[i][0]);
         map.replace(edges[i][1],list);
        }

      }  
      boolean[] visited= new boolean[n];
      Queue<Integer> vertices= new LinkedList<>();
      vertices.offer(source);
      while(!vertices.isEmpty()){
        int vertex=vertices.poll();
        if(!map.containsKey(vertex))continue;
        List<Integer> sourceEdges= map.get(vertex);
        visited[vertex]=true;
        for(int i=0;i<sourceEdges.size();i++){
         int sourceEdge= sourceEdges.get(i);
         if(sourceEdge==destination)return true;
         if(!visited[sourceEdge]){
            vertices.offer(sourceEdge);
            visited[sourceEdge]=true;
         }
        }
      }
      return false;
    }
}
