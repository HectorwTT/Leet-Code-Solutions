class Solution {
    public boolean increasingTriplet(int[] nums) {
     int n = nums.length;
     int totalOfNoLargerToRight=0;
     boolean[] hasLargerToRight = new boolean[n];
     boolean[] hasSmallerToLeft = new boolean[n];
     Stack<Integer> stack = new Stack<>();
     Stack<Integer> stack1 = new Stack<>();
     for (int i = n-1; i>= 0; i--) {
       while (!stack.isEmpty() && nums[i] >= stack.peek()) {
         stack.pop();
       }
      hasLargerToRight[i] = stack.isEmpty() ? false : true;
      if(!hasLargerToRight[i]) totalOfNoLargerToRight++;
      stack.push(nums[i]);
     }  
     if(totalOfNoLargerToRight==nums.length) return false;
     for (int i = 0; i<nums.length; i++) {
       while (!stack1.isEmpty() && nums[i] <= stack1.peek()) {
         stack1.pop();
       }
      hasSmallerToLeft[i] = stack1.isEmpty() ? false : true;
      if(hasSmallerToLeft[i] && hasLargerToRight[i])return true;
      stack1.push(nums[i]);
     }
     return false; 
    }
}
