class Solution {
    public int[] secondGreaterElement(int[] nums) {
      int [] result= new int[nums.length];
      int [] indexesToRight= new int [nums.length];
      int [] nextLarger = new int [nums.length];
      Stack<Integer> stack= new Stack<>();
      HashMap<Integer,Integer> indexes= new HashMap<>();
      for(int i=nums.length-1;i>=0;i--){
        if(!indexes.containsKey(nums[i])) indexes.put(nums[i],i);
        else indexes.replace(nums[i],i);
        while (!stack.isEmpty() && nums[i] >= stack.peek()) {
         stack.pop();
        }
        nextLarger[i] = stack.isEmpty() ? -1 : stack.peek();
        stack.push(nums[i]);
        if(nextLarger[i]==-1)result[i]=-1;
        else{
          if(nums[i]==nums[i+1])result[i]=result[i+1];
          else result[i]= getSecondLarger(indexes.get(nextLarger[i])+1,nums,nums[i]);
        }
      } 
       return result;
    }
    int getSecondLarger(int start,int[] nums,int key){
     for(int i=start;i<nums.length;i++){
         if(nums[i]>key) return nums[i];
     }
     return -1;
    }
}
