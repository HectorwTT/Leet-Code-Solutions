class Solution {
    public boolean findTarget(TreeNode root, int k) {
       List<Integer> inOrderList= inorderTraversal(root);
       HashMap<Integer,Integer>sums= new HashMap<>();
       for(int i=0;i<inOrderList.size();i++){
        int value= inOrderList.get(i).intValue();
        if(sums.containsKey(k-value))return true;
        if(!sums.containsKey(value))sums.put(value,k-value);
       } 
       return false;
    }
    public List<Integer> inorderTraversal(TreeNode root) {
     if(root==null)return new ArrayList<>();
     if (root.left==null && root.right==null) {
      List<Integer> rootlist = new ArrayList<>();
             rootlist.add(root.val);
             return rootlist;
     }else {
       if(root.left==null){
        List <Integer> result = new ArrayList<>();
        result.add(root.val);
        List<Integer> rightlist = inorderTraversal(root.right);
        result.addAll(rightlist);
        return result;
       }else if (root.right==null){
        List <Integer> result = new ArrayList<>();
        List<Integer> leftlist = inorderTraversal(root.left);
        result.addAll(leftlist);
        result.add(root.val);
        return result;
       }else{
         List <Integer> leftlist=new ArrayList<>();
         List <Integer> rightlist=new ArrayList<>();
         if(root.left!=null)leftlist=inorderTraversal(root.left);  
         if (root.right!=null)rightlist= inorderTraversal(root.right);
         List <Integer> result = new ArrayList<>();
         result.addAll(leftlist);
         result.add(root.val);
         result.addAll(rightlist);
         return result;
        }
     } 
    }
}
