class Solution {
    public int averageOfSubtree(TreeNode root) {
     if(root==null)return 0;
     else if(root.left==null && root.right==null)return 1;   
     else if(root.left==null){
        int sum = root.val +getSum(root.right);
        int count= getCount(root.right)+1;
        int average = sum/count;
        if(average==root.val)return 1+averageOfSubtree(root.right);
        else return averageOfSubtree(root.right);
     }else if(root.right==null){
        int sum= root.val+getSum(root.left);
        int count=getCount(root.left)+1;
        int average= sum/count;
        if(average==root.val)return 1+averageOfSubtree(root.left);
        else return averageOfSubtree(root.left);
     }else{
        int leftSum= getSum(root.left);
        int rightSum=getSum(root.right);
        int leftCount=getCount(root.left);
        int rightCount=getCount(root.right);
        int sum=leftSum+rightSum+root.val;
        int count=leftCount+rightCount+1;
        int average= sum/count;
        if(average==root.val)return 1+averageOfSubtree(root.left)+averageOfSubtree(root.right);
        else return averageOfSubtree(root.left)+averageOfSubtree(root.right);
     }
    }

    public int getSum(TreeNode root){
     if(root==null)return 0;
     else if(root.left==null && root.right==null)return root.val;
     else if(root.left==null)return root.val+ getSum(root.right);
     else if(root.right==null)return root.val+getSum(root.left);
     else return root.val+getSum(root.left)+getSum(root.right);
    }

    public int getCount(TreeNode root){
     if(root==null)return 0;
     else if(root.left==null && root.right==null)return 1;
     else if(root.left==null)return 1+getCount(root.right);
     else if(root.right==null)return 1+getCount(root.left);
     else return 1+getCount(root.left)+getCount(root.right);
    }
}
