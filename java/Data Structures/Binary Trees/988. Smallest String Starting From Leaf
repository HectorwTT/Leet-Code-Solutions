class Solution {
    public String smallestFromLeaf(TreeNode root) {
     List<String> paths= binaryTreePaths(root);
     List<String> result= new ArrayList<>();
     for(int i=0;i<paths.size();i++){
        String path= paths.get(i);
        String []numbers=path.split("->");
        String word="";
        for(int j=numbers.length-1;j>=0;j--){
         int number=Integer.parseInt(numbers[j])+97;
         char ch= (char) number;
         word+=ch;
        }
        result.add(word);
     }
     result.sort(null);
     return result.get(0);
    }
    private void getAllPaths(TreeNode node,List<Integer> path,List<List<Integer>> allPaths){
        if(node.left==null && node.right==null){
            path.add(node.val);
            allPaths.add(new ArrayList<>(path));
            path.remove(path.size()-1);
            return;
        }
        path.add(node.val);
        if(node.left!=null) getAllPaths(node.left,path,allPaths);
        if(node.right!=null) getAllPaths(node.right,path,allPaths);
        path.remove(path.size()-1);
        
    }
    public List<String> binaryTreePaths(TreeNode root) {
        List<Integer> path = new ArrayList<>();
        List<List<Integer>> allPaths= new ArrayList<>();
        List<String> ans= new ArrayList<>();
        getAllPaths(root,path,allPaths);
        for(List<Integer> arr:allPaths){
            StringBuffer str= new StringBuffer();
            for(int i=0;i<arr.size()-1;i++){
                str.append(String.valueOf(arr.get(i))+"->");
            }
            str.append(String.valueOf(arr.get(arr.size()-1)));
            ans.add(str.toString());             
        }
        return ans;
    }
}
