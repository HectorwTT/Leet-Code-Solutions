class Solution {
    public int widthOfBinaryTree(TreeNode root) {
     Queue<TreeNode> queue=new LinkedList<>();
     List<List<TreeNode>> result=new ArrayList<>();
     int max=-1;
     HashMap<TreeNode,Integer> map=new HashMap<>();
     queue.offer(root);
     map.put(root,1);
     while(!queue.isEmpty()){
      List<TreeNode> nodes=new ArrayList<>(); 
      int size=queue.size();
      int firstIndex=0;
      int lastIndex=0;
      for(int i=0;i<size;i++){
       TreeNode node=queue.poll();
       if(node.left!=null){
        map.put(node.left,2*map.get(node));
        queue.offer(node.left);  
       }
       if(node.right!=null){
        map.put(node.right,2*map.get(node)+1); 
        queue.offer(node.right) ; 
       }         
       nodes.add(node);
      }
      lastIndex=map.get(nodes.get(nodes.size()-1));
      firstIndex=map.get(nodes.get(0));
      max=Math.max(max,lastIndex-firstIndex+1); 
     }
      return max;      
    }
}
