class Solution {
    public int deepestLeavesSum(TreeNode root) {
      List<List<TreeNode>> levelOrder= getLevelOrderTraversal(root);
      List<TreeNode> lastNodes=levelOrder.get(levelOrder.size()-1);
      int sum=0;
      for(int i=0;i<lastNodes.size();i++){
        int number= lastNodes.get(i).val;
        sum+=number;
      }  
      return sum;
    }
    public List<List<TreeNode>> getLevelOrderTraversal(TreeNode root){
      List<List<TreeNode>> result= new ArrayList<>();
      Queue<TreeNode> queue= new LinkedList<>();
      queue.offer(root);
      while(!queue.isEmpty()){
       int size=queue.size();
       List<TreeNode> nodes= new ArrayList<>();
       for(int i=0;i<size;i++){
        TreeNode node=queue.poll();
        if(node.left!=null)queue.offer(node.left);
        if(node.right!=null)queue.offer(node.right);
        nodes.add(node);
       }
       result.add(nodes);
      }
      return result;
    }
}
