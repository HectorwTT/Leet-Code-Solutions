class Solution {
    public int minOperations(int[] nums, int[] numsDivide) {
      int gcd=GcdOfArray(numsDivide,0);
      int min=0;
      //Arrays.sort(nums);
      PriorityQueue<Integer> pq=new PriorityQueue<>();
      for(int i=0;i<nums.length;i++)pq.offer(nums[i]);
      while(!pq.isEmpty()){
       if(gcd%pq.peek()==0)break; 
       else{
        min++;
        pq.remove();
       }
      }
      if(pq.isEmpty())return -1;
      else return min;
    }
    static int __gcd(int a, int b)  
    {  
        return b == 0? a:__gcd(b, a % b);     
    }
  
// recursive implementation
static int GcdOfArray(int[] arr, int idx)
{
    if (idx == arr.length - 1) {
        return arr[idx];
    }
    int a = arr[idx];
    int b = GcdOfArray(arr, idx + 1);
    return __gcd(
        a, b); // __gcd(a,b) is inbuilt library function
}
}
