class Solution {
    public int maxEvents(int[][] events) {
        Arrays.sort(events, (a, b) -> a[0] - b[0]); // Sort by start day
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        
        int i = 0, res = 0;
        int n = events.length;
        int day = 0;

        while (i < n || !minHeap.isEmpty()) {
            // If heap is empty, move to next event's start day
            if (minHeap.isEmpty()) {
                day = events[i][0];
            }

            // Add all events starting today to heap
            while (i < n && events[i][0] <= day) {
                minHeap.offer(events[i][1]); // Push end day
                i++;
            }

            // Remove expired events
            while (!minHeap.isEmpty() && minHeap.peek() < day) {
                minHeap.poll();
            }

            // Attend event that ends earliest
            if (!minHeap.isEmpty()) {
                minHeap.poll();
                res++;
                day++;
            }
        }

        return res;
    }
}
