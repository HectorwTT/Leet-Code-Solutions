class Solution {
    public boolean isPossibleDivide(int[] nums, int k) {
       int numsSize = nums.length;
        if (numsSize % k != 0) {
         return false;
        }

        // TreeMap to store the count of each card value
        Map<Integer, Integer> numsCount = new TreeMap<>();
        for (int i = 0; i < numsSize; i++) {
         numsCount.put(nums[i],numsCount.getOrDefault(nums[i], 0) + 1);
        }

        // Process the nums until the map is empty
        while (numsCount.size() > 0) {
            // Get the smallest nums value
            int current_num = numsCount.entrySet().iterator().next().getKey();
            // Check each consecutive sequence of groupSize nums
            for (int i = 0; i < k; i++) {
                // If a num is missing or has exhausted its occurrences
                if (!numsCount.containsKey(current_num + i)) return false;
                numsCount.put(
                    current_num + i,
                    numsCount.get(current_num + i) - 1
                );
                // Remove the num value if its occurrences are exhausted
                if (numsCount.get(current_num + i) == 0) numsCount.remove(
                    current_num + i
                );
            }
        }

        return true;
    }   
    
}
