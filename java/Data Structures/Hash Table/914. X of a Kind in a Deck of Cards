class Solution {
    public boolean hasGroupsSizeX(int[] deck) {
        HashMap<Integer,Integer> map= new HashMap<>();
        List<Integer> list= new ArrayList<>();
        for(int i=0;i<deck.length;i++){
          if(!map.containsKey(deck[i]))map.put(deck[i],1);
          else map.replace(deck[i],map.get(deck[i])+1);
        }
        int x= map.get(deck[0]);System.out.println(map);
        if(map.size()==1){
         if(deck.length==1)return false;
         else return true;   
        }
        for(Integer key:map.keySet()){
         list.add(map.get(key));
        }
        list.sort(null);
        int current=list.get(1);
        int previous=list.get(0);
        int hcf=gcd(previous,current);
        if(hcf<=1)return false;
        else if(list.size()==2)return true;
        for(int i=2;i<list.size();i++){
         current=list.get(i);
         if(gcd(previous,current)<=1)return false;
         if(gcd(previous,current)%hcf!=0 && hcf%gcd(previous,current)!=0)return false;  
        }
        return true;
    }
    public int gcd(int a, int b) {
     if (a == 0)return b;
     while (b != 0) {
      if (a > b) a = a - b;
      else b = b - a;
     }
     return a;
    }
}
