class Solution {
    public int findLHS(int[] nums) {
     HashMap<Integer,List<Integer>> map= new HashMap<>();
     int max=0;
     for(int i=0;i<nums.length;i++){
      if(!map.containsKey(nums[i])){
        List<Integer> list=new ArrayList<>();
        list.add(i);
        map.put(nums[i],list);
      }else{
        List<Integer> list=map.get(nums[i]);
        list.add(i);
        map.replace(nums[i],list); 
      }  
     }

     for(int i=0;i<nums.length;i++){
       int num=nums[i];
       int numMinusOne=num-1;
       int numPlusOne=num+1;
       int currMax=-1;
       if(!map.containsKey(numMinusOne) && !map.containsKey(numPlusOne))continue;
       else if(map.containsKey(numMinusOne))currMax=map.get(num).size()+map.get(numMinusOne).size();
       else if(map.containsKey(numPlusOne)) currMax=map.get(num).size()+map.get(numPlusOne).size();
       else currMax=Math.max(map.get(num).size()+map.get(numMinusOne).size(),
                             map.get(num).size()+map.get(numPlusOne).size());
       max=Math.max(max,currMax); 
     } 
     return max;    
    }
}
