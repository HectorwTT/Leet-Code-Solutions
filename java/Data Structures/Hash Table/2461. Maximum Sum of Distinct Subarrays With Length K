class Solution {
    public long maximumSubarraySum(int[] nums, int k) {
     long max=0;
     long total=0;
     HashMap<Integer,Integer> map=new HashMap<>();
     for(int i=0;i<k;i++){
      if(!map.containsKey(nums[i])) map.put(nums[i],1);
      else map.replace(nums[i],map.get(nums[i])+1);
      total+=1L*nums[i];
     } 
     if(map.size()==k) max=Math.max(max,total);
     for(int i=1;i<=nums.length-k;i++){
      map.replace(nums[i-1],map.get(nums[i-1])-1);
      if(map.get(nums[i-1])==0)map.remove(nums[i-1]);
      if(!map.containsKey(nums[i+k-1]))map.put(nums[i+k-1],1);
      else map.replace(nums[i+k-1],map.get(nums[i+k-1])+1);
      total-=1L*nums[i-1];
      total+=1L*nums[i+k-1];
      if(map.size()==k)max=Math.max(max,total);
     }    
     return max;
    }
}
