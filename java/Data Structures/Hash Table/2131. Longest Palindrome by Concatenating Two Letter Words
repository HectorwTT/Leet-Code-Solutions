class Solution {
     public int longestPalindrome(String[] words) {
        HashMap<String, Integer> count = new HashMap<String, Integer>();
        for (String word : words) {
            Integer countOfTheWord = count.get(word);
            if (countOfTheWord == null) {
                count.put(word, 1);
            } else {
                count.put(word, countOfTheWord + 1);
            }
        }
        int answer = 0;
        boolean central = false;
        for (Map.Entry<String, Integer> entry : count.entrySet()) {
            String word = entry.getKey();
            int countOfTheWord = entry.getValue();
            // if the word is a palindrome
            if (word.charAt(0) == word.charAt(1)) {
                if (countOfTheWord % 2 == 0) {
                    answer += countOfTheWord;
                } else {
                    
                    // this is the crux 
                    // say there is aa - 3 and bb - 3 
                    // then sure you can use aa 2 times and bb 2 times at the edges but at the middle -
                    // you can either use aa or bb at a time to get a palindrome, you can't use both

                    // example - aa bb aa (here you can use either aa or bb - not both) aa bb aa
                    // so to maintain that count, we always let go of the additional odd count with countOfTheWord - 1
                    // and then eventually - we add just 1 back - if (central) { answer++; } to make up for the single word that can be added at the middle. 

                    answer += countOfTheWord - 1;
                    central = true;
                }
            // consider a pair of non-palindrome words such that one is the reverse of another
            } else if (word.charAt(0) < word.charAt(1)) {
                String reversedWord = "" + word.charAt(1) + word.charAt(0);
                if (count.containsKey(reversedWord)) {
                    answer += 2 * Math.min(countOfTheWord, count.get(reversedWord));
                }
            }
        }
        if (central) {
            answer++;
        }
        return 2 * answer;
    }   
}
