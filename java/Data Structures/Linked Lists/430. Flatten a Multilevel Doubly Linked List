class Solution {
    public Node flatten(Node head) {
      if(head==null)return  head;
      List<Integer> list=dfs(head);
      Node newHead=new Node();
      newHead.val=list.get(0);
      Node current =newHead;
      for(int i=1;i<list.size();i++){
        Node tmp=new Node();
        tmp.val=list.get(i);
        current.next=tmp;
        tmp.prev=current;
        current=current.next;
      }
      return newHead;
    }
    public List<Integer> dfs(Node head){
     List<Integer> result= new ArrayList<>();
     if(head==null)return result;
     else if(head.child!=null){
      result.add(head.val);
      result.addAll(dfs(head.child));
      result.addAll(dfs(head.next));
      return result;  
     }else{
       result.add(head.val);
       result.addAll(dfs(head.next));
       return result; 
     }   
    }
}
